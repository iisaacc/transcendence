name: transcendence

services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: nginx
    container_name: nginx
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - backend:/usr/src/app
      - frontend:/usr/src/frontend
      - certs:/certs
      - logs:/var/log/nginx
    networks:
      - transcendence
    restart: unless-stopped
    depends_on:
      - gateway

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: gateway
    image: gateway
    container_name: gateway
    environment:
      - PYTHONPATH=/usr/src/app/authentif_app
    env_file:
      - .env
    expose:
      - 8443
    networks:
      - transcendence
    volumes:
      - backend:/usr/src/app
      - frontend:/usr/src/frontend
      - certs:/certs
      - logs:/usr/src/app/logs
    depends_on:
      - postgres
      - authentif
      - calcgame
      - profileapi
      - play
    # command: daphne -e ssl:8443:/certs/key.pem:/certs/cert.pem gateway.asgi:application
    command: uvicorn gateway.asgi:application --host 0.0.0.0 --port 8443 --reload --ssl-keyfile=/certs/key.pem --ssl-certfile=/certs/cert.pem
    # command: gunicorn gateway.asgi:application -w 4 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8443 --ssl-keyfile=/certs/key.pem --ssl-certfile=/certs/cert.pem # to handle multiple connections
    # restart: unless-stopped

  authentif:
    build:
      context: ./authentif
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: authentif
    image: authentif
    container_name: authentif
    environment:
      - PYTHONPATH=/usr/src/app/authentif_app
    env_file:
      - .env
    expose:
      - 9001
    networks:
      - transcendence
    volumes:
      - backend:/usr/src/app
      - frontend:/usr/src/frontend
      - certs:/certs
      - logs:/usr/src/app/logs
    depends_on:
      - postgres
    # command: daphne -e ssl:9001:/certs/key.pem:/certs/cert.pem authentif.asgi:application
    command: uvicorn authentif.asgi:application --host 0.0.0.0 --port 9001 --reload --ssl-keyfile=/certs/key.pem --ssl-certfile=/certs/cert.pem
    #   restart: unless-stopped

  profileapi:
    build:
      context: ./profileapi
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: profileapi
    image: profileapi
    container_name: profileapi
    environment:
      - PYTHONPATH=/usr/src/app/authentif_app
    env_file:
      - .env
    expose:
      - 9002
    networks:
      - transcendence
    volumes:
      - backend:/usr/src/app
      - frontend:/usr/src/frontend
      - certs:/certs
      - logs:/usr/src/app/logs
    depends_on:
      - postgres
      - authentif
    # command: daphne -e ssl:9002:/certs/key.pem:/certs/cert.pem profileapi.asgi:application
    command: uvicorn profileapi.asgi:application --host 0.0.0.0 --port 9002 --reload --ssl-keyfile=/certs/key.pem --ssl-certfile=/certs/cert.pem

  play:
    build:
      context: ./play
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: play
    image: play
    container_name: play
    environment:
      - PYTHONPATH=/usr/src/app/authentif_app
    env_file:
      - .env
    expose:
      - 9003
    networks:
      - transcendence
    volumes:
      - backend:/usr/src/app
      - frontend:/usr/src/frontend
      - certs:/certs
      - logs:/usr/src/app/logs
    depends_on:
      - postgres
    # command: daphne -e ssl:9003:/certs/key.pem:/certs/cert.pem play.asgi:application
    command: uvicorn play.asgi:application --host 0.0.0.0 --port 9003 --reload --ssl-keyfile=/certs/key.pem --ssl-certfile=/certs/cert.pem

  calcgame:
    build:
      context: ./calcgame
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: calcgame
    image: calcgame
    container_name: calcgame
    environment:
      - PYTHONPATH=/usr/src/app/authentif_app
    env_file:
      - .env
    expose:
      - 9004
    networks:
      - transcendence
    volumes:
      - backend:/usr/src/app
      - frontend:/usr/src/frontend
      - certs:/certs
      - logs:/usr/src/app/logs
    depends_on:
      - postgres
      - authentif
    # command: daphne -e ssl:9004:/certs/key.pem:/certs/cert.pem calcgame.asgi:application
    command: uvicorn calcgame.asgi:application --host 0.0.0.0 --port 9004 --reload --ssl-keyfile=/certs/key.pem --ssl-certfile=/certs/cert.pem

  blockchain:
    build:
      context: ./blockchain
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: blockchain
    image: blockchain
    container_name: blockchain
    env_file:
      - .env
    expose:
      - 8545
    networks:
      - transcendence
    volumes:
      - backend:/usr/src/app
      - frontend:/usr/src/frontend
      - certs:/certs
    depends_on:
      - postgres
      - authentif
    # command: daphne -e ssl:8545:/certs/key.pem:/certs/cert.pem blockchain.asgi:application
    command: uvicorn blockchain.asgi:application --host 0.0.0.0 --port 8545 --reload --ssl-keyfile=/certs/key.pem --ssl-certfile=/certs/cert.pem

  postgres:
    image: postgres:16.4-alpine3.20
    container_name: postgres
    env_file:
      - .env
    environment:
      LC_COLLATE: en_US.UTF-8
      LC_CTYPE: en_US.UTF-8
    expose:
      - 5432
    working_dir: /var/lib/postgresql/data
    volumes:
      - postgres_database:/var/lib/postgresql/data
      - certs:/certs
    networks:
      - transcendence
    # restart: unless-stopped

  elasticsearch:
    stdin_open: true
    tty: true
    build:
      context: ./elasticsearch
      dockerfile: Dockerfile
      args:
        ELKF_VERSION: ${ELKF_VERSION:-7.17.0}
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - node.name=node-1
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - LOGSTASH_PASSWORD=${LOGSTASH_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    volumes:
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - certs:/usr/share/elasticsearch/config/certs
    ports:
      - "9200:9200"
    networks:
      - transcendence
    depends_on:
      - gateway
    env_file:
      - .env

  logstash:
    build:
      context: ./logstash
      dockerfile: Dockerfile
      args:
        ELKF_VERSION: ${ELKF_VERSION:-7.17.0}
    container_name: logstash
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - certs:/usr/share/logstash/config/certs
    ports:
      - "5000:5000"
      - "9600:9600"  # For Filebeat to send logs
      - "5044:5044"  # For Logstash to receive logs
    depends_on:
      - elasticsearch
    environment:
      - LOGSTASH_PASSWORD=${LOGSTASH_PASSWORD}
    networks:
      - transcendence
    env_file:
      - .env
    restart: unless-stopped

  kibana:
    build:
      context: ./kibana
      dockerfile: Dockerfile
      args:
        ELKF_VERSION: ${ELKF_VERSION:-7.17.0}
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    environment:
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    networks:
      - transcendence
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - certs:/certs
    env_file:
      - .env
    restart: unless-stopped

  filebeat:
    build:
      context: ./filebeat
      dockerfile: Dockerfile
      args:
        ELKF_VERSION: ${ELKF_VERSION:-7.17.0}
    container_name: filebeat
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - logs:/usr/share/filebeat/logs
      - certs:/certs
    depends_on:
      - logstash
    networks:
      - transcendence
    env_file:
      - .env
    restart: unless-stopped


volumes:
  frontend:
    name: frontend
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../volumes/frontend
  backend:
    name: backend
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../volumes/backend/
  postgres_database:
    name: postgres_database
    driver: local
  logs:
    name: logs
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../volumes/logs/
  certs:
    name: certs
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../volumes/certs/

networks:
  transcendence:
    name: transcendence
    driver: bridge
